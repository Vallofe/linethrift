// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"thrift"
	"linethrift"
)

var _ = linethrift.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  Profile getProfile(TalkSyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  void requestResendMessage(i32 reqSeq, string senderMid, string messageId)")
  fmt.Fprintln(os.Stderr, "  void respondResendMessage(i32 reqSeq, string receiverMid, string originalMessageId, Message resendMessage, ErrorCode errorCode)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "  GetContactsV2Response getContactsV2(GetContactsV2Request request, TalkSyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, ContactType type, string reference)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones, string reference)")
  fmt.Fprintln(os.Stderr, "   getAllContactIds()")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds()")
  fmt.Fprintln(os.Stderr, "   getBlockedRecommendationIds()")
  fmt.Fprintln(os.Stderr, "  Configurations getConfigurations(i64 revision, string regionOfUsim, string regionOfTelephone, string regionOfLocale, string carrier, TalkSyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey getE2EEPublicKey(string mid, i32 version, i32 keyId)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  RSAKey getRSAKeyInfo(IdentityProvider provider)")
  fmt.Fprintln(os.Stderr, "   getRecommendationIds()")
  fmt.Fprintln(os.Stderr, "  Settings getSettings()")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes2()")
  fmt.Fprintln(os.Stderr, "  E2EENegotiationResult negotiateE2EEPublicKey(string mid)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey registerE2EEPublicKey(i32 reqSeq, E2EEPublicKey publicKey)")
  fmt.Fprintln(os.Stderr, "   syncContacts(i32 reqSeq,  localContacts)")
  fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey registerE2EEGroupKey()")
  fmt.Fprintln(os.Stderr, "  void removeFollower()")
  fmt.Fprintln(os.Stderr, "  void report()")
  fmt.Fprintln(os.Stderr, "  void reportProfile()")
  fmt.Fprintln(os.Stderr, "  void reportPushRecvReports()")
  fmt.Fprintln(os.Stderr, "  void reportSettings()")
  fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset()")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData changeVerificationMethod()")
  fmt.Fprintln(os.Stderr, "  void resendPinCode()")
  fmt.Fprintln(os.Stderr, "  void clearRingbackTone()")
  fmt.Fprintln(os.Stderr, "  void clearRingtone()")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "  string decryptFollowEMid(string eMid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserTicket(string ticketIdWithTag)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)")
  fmt.Fprintln(os.Stderr, "   findContactsByPhone( phones)")
  fmt.Fprintln(os.Stderr, "  void tryFriendRequest(string midOrEMid, FriendRequestMethod method, string friendRequestParams)")
  fmt.Fprintln(os.Stderr, "  void follow(FollowRequest followRequest)")
  fmt.Fprintln(os.Stderr, "  void unfollow(UnfollowRequest unfollowRequest)")
  fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  GetChatsResponse getChats(GetChatsRequest request)")
  fmt.Fprintln(os.Stderr, "  void updateNotificationToken(NotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  ContactRegistration getContactRegistration(string id, ContactType type)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getE2EEGroupSharedKey(i32 keyVersion, string chatMid, i32 groupKeyId)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr, "  bool wakeUpLongPolling(i64 clientRevision)")
  fmt.Fprintln(os.Stderr, "  GetFollowersResponse getFollowers(GetFollowersRequest getFollowersRequest)")
  fmt.Fprintln(os.Stderr, "  GetFollowingsResponse getFollowings(GetFollowingsRequest getFollowingsRequest)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getLastE2EEGroupSharedKey(i32 keyVersion, string chatMid)")
  fmt.Fprintln(os.Stderr, "   getLastE2EEPublicKeys(string chatMid)")
  fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
  fmt.Fprintln(os.Stderr, "   getRoomsV2( roomIds)")
  fmt.Fprintln(os.Stderr, "  bool isUseridAvailable(string userid)")
  fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(FeatureType featureType)")
  fmt.Fprintln(os.Stderr, "  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, i32 syncReason)")
  fmt.Fprintln(os.Stderr, "  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  FindChatByTicketResponse findChatByTicket(FindChatByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)")
  fmt.Fprintln(os.Stderr, "  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  CreateChatResponse createChat(CreateChatRequest request)")
  fmt.Fprintln(os.Stderr, "  ReissueChatTicketResponse reissueChatTicket(ReissueChatTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  UpdateChatResponse updateChat(UpdateChatRequest request)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationByTicketResponse acceptChatInvitationByTicket(AcceptChatInvitationByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "   getMessageReadRange( chatIds, TalkSyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void react(ReactRequest reactRequest)")
  fmt.Fprintln(os.Stderr, "   getPreviousMessagesV2WithRequest(GetPreviousMessagesV2Request request, TalkSyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getPreviousMessagesV2()")
  fmt.Fprintln(os.Stderr, "   getRecentMessagesV2(string messageBoxId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "  void cancelReaction()")
  fmt.Fprintln(os.Stderr, "  DetermineMediaMessageFlowResponse determineMediaMessageFlow()")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncementsBulk()")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncements()")
  fmt.Fprintln(os.Stderr, "  void removeChatRoomAnnouncement()")
  fmt.Fprintln(os.Stderr, "  ChatRoomAnnouncement createChatRoomAnnouncement()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := linethrift.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.TalkSyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err430 := (strconv.Atoi(flag.Arg(1)))
    if err430 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg431 := flag.Arg(2)
    mbTrans432 := thrift.NewTMemoryBufferLen(len(arg431))
    defer mbTrans432.Close()
    _, err433 := mbTrans432.WriteString(arg431)
    if err433 != nil {
      Usage()
      return
    }
    factory434 := thrift.NewTJSONProtocolFactory()
    jsProt435 := factory434.GetProtocol(mbTrans432)
    argvalue1 := linethrift.NewMessage()
    err436 := argvalue1.Read(jsProt435)
    if err436 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err437 := (strconv.Atoi(flag.Arg(1)))
    if err437 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "requestResendMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestResendMessage requires 3 args")
      flag.Usage()
    }
    tmp0, err439 := (strconv.Atoi(flag.Arg(1)))
    if err439 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestResendMessage(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "respondResendMessage":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RespondResendMessage requires 5 args")
      flag.Usage()
    }
    tmp0, err442 := (strconv.Atoi(flag.Arg(1)))
    if err442 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg445 := flag.Arg(4)
    mbTrans446 := thrift.NewTMemoryBufferLen(len(arg445))
    defer mbTrans446.Close()
    _, err447 := mbTrans446.WriteString(arg445)
    if err447 != nil {
      Usage()
      return
    }
    factory448 := thrift.NewTJSONProtocolFactory()
    jsProt449 := factory448.GetProtocol(mbTrans446)
    argvalue3 := linethrift.NewMessage()
    err450 := argvalue3.Read(jsProt449)
    if err450 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := linethrift.ErrorCode(tmp4)
    value4 := argvalue4
    fmt.Print(client.RespondResendMessage(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 4 args")
      flag.Usage()
    }
    tmp0, err451 := (strconv.Atoi(flag.Arg(1)))
    if err451 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err454 := (strconv.Atoi(flag.Arg(4)))
    if err454 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg456 := flag.Arg(1)
    mbTrans457 := thrift.NewTMemoryBufferLen(len(arg456))
    defer mbTrans457.Close()
    _, err458 := mbTrans457.WriteString(arg456)
    if err458 != nil { 
      Usage()
      return
    }
    factory459 := thrift.NewTJSONProtocolFactory()
    jsProt460 := factory459.GetProtocol(mbTrans457)
    containerStruct0 := linethrift.NewTalkServiceGetContactsArgs()
    err461 := containerStruct0.ReadField1(jsProt460)
    if err461 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContactsV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetContactsV2 requires 2 args")
      flag.Usage()
    }
    arg462 := flag.Arg(1)
    mbTrans463 := thrift.NewTMemoryBufferLen(len(arg462))
    defer mbTrans463.Close()
    _, err464 := mbTrans463.WriteString(arg462)
    if err464 != nil {
      Usage()
      return
    }
    factory465 := thrift.NewTJSONProtocolFactory()
    jsProt466 := factory465.GetProtocol(mbTrans463)
    argvalue0 := linethrift.NewGetContactsV2Request()
    err467 := argvalue0.Read(jsProt466)
    if err467 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.TalkSyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetContactsV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err468 := (strconv.Atoi(flag.Arg(1)))
    if err468 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := linethrift.ContactType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactsByPhone":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 3 args")
      flag.Usage()
    }
    tmp0, err471 := (strconv.Atoi(flag.Arg(1)))
    if err471 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg472 := flag.Arg(2)
    mbTrans473 := thrift.NewTMemoryBufferLen(len(arg472))
    defer mbTrans473.Close()
    _, err474 := mbTrans473.WriteString(arg472)
    if err474 != nil { 
      Usage()
      return
    }
    factory475 := thrift.NewTJSONProtocolFactory()
    jsProt476 := factory475.GetProtocol(mbTrans473)
    containerStruct1 := linethrift.NewTalkServiceFindAndAddContactsByPhoneArgs()
    err477 := containerStruct1.ReadField2(jsProt476)
    if err477 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Phones
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByPhone(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockedRecommendationIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedRecommendationIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedRecommendationIds(context.Background()))
    fmt.Print("\n")
    break
  case "getConfigurations":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetConfigurations requires 6 args")
      flag.Usage()
    }
    argvalue0, err479 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err479 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    tmp5, err := (strconv.Atoi(flag.Arg(6)))
    if err != nil {
      Usage()
     return
    }
    argvalue5 := linethrift.TalkSyncReason(tmp5)
    value5 := argvalue5
    fmt.Print(client.GetConfigurations(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getE2EEPublicKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err485 := (strconv.Atoi(flag.Arg(2)))
    if err485 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err486 := (strconv.Atoi(flag.Arg(3)))
    if err486 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEPublicKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findAndAddContactsByUserid":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 3 args")
      flag.Usage()
    }
    tmp0, err487 := (strconv.Atoi(flag.Arg(1)))
    if err487 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRSAKeyInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRSAKeyInfo requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.IdentityProvider(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRSAKeyInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRecommendationIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRecommendationIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRecommendationIds(context.Background()))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSettings(context.Background()))
    fmt.Print("\n")
    break
  case "getSettingsAttributes2":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes2 requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSettingsAttributes2(context.Background()))
    fmt.Print("\n")
    break
  case "negotiateE2EEPublicKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NegotiateE2EEPublicKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.NegotiateE2EEPublicKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerE2EEPublicKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEPublicKey requires 2 args")
      flag.Usage()
    }
    tmp0, err491 := (strconv.Atoi(flag.Arg(1)))
    if err491 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg492 := flag.Arg(2)
    mbTrans493 := thrift.NewTMemoryBufferLen(len(arg492))
    defer mbTrans493.Close()
    _, err494 := mbTrans493.WriteString(arg492)
    if err494 != nil {
      Usage()
      return
    }
    factory495 := thrift.NewTJSONProtocolFactory()
    jsProt496 := factory495.GetProtocol(mbTrans493)
    argvalue1 := linethrift.NewE2EEPublicKey()
    err497 := argvalue1.Read(jsProt496)
    if err497 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterE2EEPublicKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "syncContacts":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncContacts requires 2 args")
      flag.Usage()
    }
    tmp0, err498 := (strconv.Atoi(flag.Arg(1)))
    if err498 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg499 := flag.Arg(2)
    mbTrans500 := thrift.NewTMemoryBufferLen(len(arg499))
    defer mbTrans500.Close()
    _, err501 := mbTrans500.WriteString(arg499)
    if err501 != nil { 
      Usage()
      return
    }
    factory502 := thrift.NewTJSONProtocolFactory()
    jsProt503 := factory502.GetProtocol(mbTrans500)
    containerStruct1 := linethrift.NewTalkServiceSyncContactsArgs()
    err504 := containerStruct1.ReadField2(jsProt503)
    if err504 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.LocalContacts
    value1 := argvalue1
    fmt.Print(client.SyncContacts(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unregisterUserAndDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnregisterUserAndDevice(context.Background()))
    fmt.Print("\n")
    break
  case "registerE2EEGroupKey":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEGroupKey requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.RegisterE2EEGroupKey(context.Background()))
    fmt.Print("\n")
    break
  case "removeFollower":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "RemoveFollower requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.RemoveFollower(context.Background()))
    fmt.Print("\n")
    break
  case "report":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Report requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Report(context.Background()))
    fmt.Print("\n")
    break
  case "reportProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReportProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReportProfile(context.Background()))
    fmt.Print("\n")
    break
  case "reportPushRecvReports":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReportPushRecvReports requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReportPushRecvReports(context.Background()))
    fmt.Print("\n")
    break
  case "reportSettings":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReportSettings requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReportSettings(context.Background()))
    fmt.Print("\n")
    break
  case "requestAccountPasswordReset":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.RequestAccountPasswordReset(context.Background()))
    fmt.Print("\n")
    break
  case "changeVerificationMethod":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ChangeVerificationMethod requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ChangeVerificationMethod(context.Background()))
    fmt.Print("\n")
    break
  case "resendPinCode":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ResendPinCode requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ResendPinCode(context.Background()))
    fmt.Print("\n")
    break
  case "clearRingbackTone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ClearRingbackTone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ClearRingbackTone(context.Background()))
    fmt.Print("\n")
    break
  case "clearRingtone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ClearRingtone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ClearRingtone(context.Background()))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err505 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err505 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err506 := (strconv.Atoi(flag.Arg(2)))
    if err506 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err507 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err507 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err508 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err508 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "decryptFollowEMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DecryptFollowEMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DecryptFollowEMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err511 := (strconv.Atoi(flag.Arg(1)))
    if err511 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := linethrift.ContactSetting(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findContactsByPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByPhone requires 1 args")
      flag.Usage()
    }
    arg514 := flag.Arg(1)
    mbTrans515 := thrift.NewTMemoryBufferLen(len(arg514))
    defer mbTrans515.Close()
    _, err516 := mbTrans515.WriteString(arg514)
    if err516 != nil { 
      Usage()
      return
    }
    factory517 := thrift.NewTJSONProtocolFactory()
    jsProt518 := factory517.GetProtocol(mbTrans515)
    containerStruct0 := linethrift.NewTalkServiceFindContactsByPhoneArgs()
    err519 := containerStruct0.ReadField1(jsProt518)
    if err519 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Phones
    value0 := argvalue0
    fmt.Print(client.FindContactsByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "tryFriendRequest":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TryFriendRequest requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.FriendRequestMethod(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.TryFriendRequest(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "follow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Follow requires 1 args")
      flag.Usage()
    }
    arg522 := flag.Arg(1)
    mbTrans523 := thrift.NewTMemoryBufferLen(len(arg522))
    defer mbTrans523.Close()
    _, err524 := mbTrans523.WriteString(arg522)
    if err524 != nil {
      Usage()
      return
    }
    factory525 := thrift.NewTJSONProtocolFactory()
    jsProt526 := factory525.GetProtocol(mbTrans523)
    argvalue0 := linethrift.NewFollowRequest()
    err527 := argvalue0.Read(jsProt526)
    if err527 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Follow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unfollow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unfollow requires 1 args")
      flag.Usage()
    }
    arg528 := flag.Arg(1)
    mbTrans529 := thrift.NewTMemoryBufferLen(len(arg528))
    defer mbTrans529.Close()
    _, err530 := mbTrans529.WriteString(arg528)
    if err530 != nil {
      Usage()
      return
    }
    factory531 := thrift.NewTJSONProtocolFactory()
    jsProt532 := factory531.GetProtocol(mbTrans529)
    argvalue0 := linethrift.NewUnfollowRequest()
    err533 := argvalue0.Read(jsProt532)
    if err533 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unfollow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err534 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err534 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err535 := (strconv.Atoi(flag.Arg(2)))
    if err535 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChats requires 1 args")
      flag.Usage()
    }
    arg536 := flag.Arg(1)
    mbTrans537 := thrift.NewTMemoryBufferLen(len(arg536))
    defer mbTrans537.Close()
    _, err538 := mbTrans537.WriteString(arg536)
    if err538 != nil {
      Usage()
      return
    }
    factory539 := thrift.NewTJSONProtocolFactory()
    jsProt540 := factory539.GetProtocol(mbTrans537)
    argvalue0 := linethrift.NewGetChatsRequest()
    err541 := argvalue0.Read(jsProt540)
    if err541 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetChats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateNotificationToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.NotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getContactRegistration":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetContactRegistration requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.ContactType(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetContactRegistration(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getE2EEGroupSharedKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEGroupSharedKey requires 3 args")
      flag.Usage()
    }
    tmp0, err544 := (strconv.Atoi(flag.Arg(1)))
    if err544 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err546 := (strconv.Atoi(flag.Arg(3)))
    if err546 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEGroupSharedKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "wakeUpLongPolling":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WakeUpLongPolling requires 1 args")
      flag.Usage()
    }
    argvalue0, err549 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err549 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.WakeUpLongPolling(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowers requires 1 args")
      flag.Usage()
    }
    arg550 := flag.Arg(1)
    mbTrans551 := thrift.NewTMemoryBufferLen(len(arg550))
    defer mbTrans551.Close()
    _, err552 := mbTrans551.WriteString(arg550)
    if err552 != nil {
      Usage()
      return
    }
    factory553 := thrift.NewTJSONProtocolFactory()
    jsProt554 := factory553.GetProtocol(mbTrans551)
    argvalue0 := linethrift.NewGetFollowersRequest()
    err555 := argvalue0.Read(jsProt554)
    if err555 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowings requires 1 args")
      flag.Usage()
    }
    arg556 := flag.Arg(1)
    mbTrans557 := thrift.NewTMemoryBufferLen(len(arg556))
    defer mbTrans557.Close()
    _, err558 := mbTrans557.WriteString(arg556)
    if err558 != nil {
      Usage()
      return
    }
    factory559 := thrift.NewTJSONProtocolFactory()
    jsProt560 := factory559.GetProtocol(mbTrans557)
    argvalue0 := linethrift.NewGetFollowingsRequest()
    err561 := argvalue0.Read(jsProt560)
    if err561 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastE2EEGroupSharedKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEGroupSharedKey requires 2 args")
      flag.Usage()
    }
    tmp0, err562 := (strconv.Atoi(flag.Arg(1)))
    if err562 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetLastE2EEGroupSharedKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getLastE2EEPublicKeys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEPublicKeys requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLastE2EEPublicKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastOpRevision":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastOpRevision(context.Background()))
    fmt.Print("\n")
    break
  case "getRoomsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoomsV2 requires 1 args")
      flag.Usage()
    }
    arg565 := flag.Arg(1)
    mbTrans566 := thrift.NewTMemoryBufferLen(len(arg565))
    defer mbTrans566.Close()
    _, err567 := mbTrans566.WriteString(arg565)
    if err567 != nil { 
      Usage()
      return
    }
    factory568 := thrift.NewTJSONProtocolFactory()
    jsProt569 := factory568.GetProtocol(mbTrans566)
    containerStruct0 := linethrift.NewTalkServiceGetRoomsV2Args()
    err570 := containerStruct0.ReadField1(jsProt569)
    if err570 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RoomIds
    value0 := argvalue0
    fmt.Print(client.GetRoomsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isUseridAvailable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsUseridAvailable requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsUseridAvailable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireEncryptedAccessToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.FeatureType(tmp0)
    value0 := argvalue0
    fmt.Print(client.AcquireEncryptedAccessToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rejectChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RejectChatInvitation requires 1 args")
      flag.Usage()
    }
    arg572 := flag.Arg(1)
    mbTrans573 := thrift.NewTMemoryBufferLen(len(arg572))
    defer mbTrans573.Close()
    _, err574 := mbTrans573.WriteString(arg572)
    if err574 != nil {
      Usage()
      return
    }
    factory575 := thrift.NewTJSONProtocolFactory()
    jsProt576 := factory575.GetProtocol(mbTrans573)
    argvalue0 := linethrift.NewRejectChatInvitationRequest()
    err577 := argvalue0.Read(jsProt576)
    if err577 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RejectChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllChatMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllChatMids requires 2 args")
      flag.Usage()
    }
    arg578 := flag.Arg(1)
    mbTrans579 := thrift.NewTMemoryBufferLen(len(arg578))
    defer mbTrans579.Close()
    _, err580 := mbTrans579.WriteString(arg578)
    if err580 != nil {
      Usage()
      return
    }
    factory581 := thrift.NewTJSONProtocolFactory()
    jsProt582 := factory581.GetProtocol(mbTrans579)
    argvalue0 := linethrift.NewGetAllChatMidsRequest()
    err583 := argvalue0.Read(jsProt582)
    if err583 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err584 := (strconv.Atoi(flag.Arg(2)))
    if err584 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAllChatMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteSelfFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteSelfFromChat requires 1 args")
      flag.Usage()
    }
    arg585 := flag.Arg(1)
    mbTrans586 := thrift.NewTMemoryBufferLen(len(arg585))
    defer mbTrans586.Close()
    _, err587 := mbTrans586.WriteString(arg585)
    if err587 != nil {
      Usage()
      return
    }
    factory588 := thrift.NewTJSONProtocolFactory()
    jsProt589 := factory588.GetProtocol(mbTrans586)
    argvalue0 := linethrift.NewDeleteSelfFromChatRequest()
    err590 := argvalue0.Read(jsProt589)
    if err590 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteSelfFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findChatByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindChatByTicket requires 1 args")
      flag.Usage()
    }
    arg591 := flag.Arg(1)
    mbTrans592 := thrift.NewTMemoryBufferLen(len(arg591))
    defer mbTrans592.Close()
    _, err593 := mbTrans592.WriteString(arg591)
    if err593 != nil {
      Usage()
      return
    }
    factory594 := thrift.NewTJSONProtocolFactory()
    jsProt595 := factory594.GetProtocol(mbTrans592)
    argvalue0 := linethrift.NewFindChatByTicketRequest()
    err596 := argvalue0.Read(jsProt595)
    if err596 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindChatByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteIntoChat requires 1 args")
      flag.Usage()
    }
    arg597 := flag.Arg(1)
    mbTrans598 := thrift.NewTMemoryBufferLen(len(arg597))
    defer mbTrans598.Close()
    _, err599 := mbTrans598.WriteString(arg597)
    if err599 != nil {
      Usage()
      return
    }
    factory600 := thrift.NewTJSONProtocolFactory()
    jsProt601 := factory600.GetProtocol(mbTrans598)
    argvalue0 := linethrift.NewInviteIntoChatRequest()
    err602 := argvalue0.Read(jsProt601)
    if err602 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InviteIntoChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteOtherFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteOtherFromChat requires 1 args")
      flag.Usage()
    }
    arg603 := flag.Arg(1)
    mbTrans604 := thrift.NewTMemoryBufferLen(len(arg603))
    defer mbTrans604.Close()
    _, err605 := mbTrans604.WriteString(arg603)
    if err605 != nil {
      Usage()
      return
    }
    factory606 := thrift.NewTJSONProtocolFactory()
    jsProt607 := factory606.GetProtocol(mbTrans604)
    argvalue0 := linethrift.NewDeleteOtherFromChatRequest()
    err608 := argvalue0.Read(jsProt607)
    if err608 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteOtherFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateChat requires 1 args")
      flag.Usage()
    }
    arg609 := flag.Arg(1)
    mbTrans610 := thrift.NewTMemoryBufferLen(len(arg609))
    defer mbTrans610.Close()
    _, err611 := mbTrans610.WriteString(arg609)
    if err611 != nil {
      Usage()
      return
    }
    factory612 := thrift.NewTJSONProtocolFactory()
    jsProt613 := factory612.GetProtocol(mbTrans610)
    argvalue0 := linethrift.NewCreateChatRequest()
    err614 := argvalue0.Read(jsProt613)
    if err614 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reissueChatTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueChatTicket requires 1 args")
      flag.Usage()
    }
    arg615 := flag.Arg(1)
    mbTrans616 := thrift.NewTMemoryBufferLen(len(arg615))
    defer mbTrans616.Close()
    _, err617 := mbTrans616.WriteString(arg615)
    if err617 != nil {
      Usage()
      return
    }
    factory618 := thrift.NewTJSONProtocolFactory()
    jsProt619 := factory618.GetProtocol(mbTrans616)
    argvalue0 := linethrift.NewReissueChatTicketRequest()
    err620 := argvalue0.Read(jsProt619)
    if err620 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReissueChatTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancelChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelChatInvitation requires 1 args")
      flag.Usage()
    }
    arg621 := flag.Arg(1)
    mbTrans622 := thrift.NewTMemoryBufferLen(len(arg621))
    defer mbTrans622.Close()
    _, err623 := mbTrans622.WriteString(arg621)
    if err623 != nil {
      Usage()
      return
    }
    factory624 := thrift.NewTJSONProtocolFactory()
    jsProt625 := factory624.GetProtocol(mbTrans622)
    argvalue0 := linethrift.NewCancelChatInvitationRequest()
    err626 := argvalue0.Read(jsProt625)
    if err626 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChat requires 1 args")
      flag.Usage()
    }
    arg627 := flag.Arg(1)
    mbTrans628 := thrift.NewTMemoryBufferLen(len(arg627))
    defer mbTrans628.Close()
    _, err629 := mbTrans628.WriteString(arg627)
    if err629 != nil {
      Usage()
      return
    }
    factory630 := thrift.NewTJSONProtocolFactory()
    jsProt631 := factory630.GetProtocol(mbTrans628)
    argvalue0 := linethrift.NewUpdateChatRequest()
    err632 := argvalue0.Read(jsProt631)
    if err632 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitation requires 1 args")
      flag.Usage()
    }
    arg633 := flag.Arg(1)
    mbTrans634 := thrift.NewTMemoryBufferLen(len(arg633))
    defer mbTrans634.Close()
    _, err635 := mbTrans634.WriteString(arg633)
    if err635 != nil {
      Usage()
      return
    }
    factory636 := thrift.NewTJSONProtocolFactory()
    jsProt637 := factory636.GetProtocol(mbTrans634)
    argvalue0 := linethrift.NewAcceptChatInvitationRequest()
    err638 := argvalue0.Read(jsProt637)
    if err638 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptChatInvitationByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitationByTicket requires 1 args")
      flag.Usage()
    }
    arg639 := flag.Arg(1)
    mbTrans640 := thrift.NewTMemoryBufferLen(len(arg639))
    defer mbTrans640.Close()
    _, err641 := mbTrans640.WriteString(arg639)
    if err641 != nil {
      Usage()
      return
    }
    factory642 := thrift.NewTJSONProtocolFactory()
    jsProt643 := factory642.GetProtocol(mbTrans640)
    argvalue0 := linethrift.NewAcceptChatInvitationByTicketRequest()
    err644 := argvalue0.Read(jsProt643)
    if err644 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitationByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMessageReadRange":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageReadRange requires 2 args")
      flag.Usage()
    }
    arg645 := flag.Arg(1)
    mbTrans646 := thrift.NewTMemoryBufferLen(len(arg645))
    defer mbTrans646.Close()
    _, err647 := mbTrans646.WriteString(arg645)
    if err647 != nil { 
      Usage()
      return
    }
    factory648 := thrift.NewTJSONProtocolFactory()
    jsProt649 := factory648.GetProtocol(mbTrans646)
    containerStruct0 := linethrift.NewTalkServiceGetMessageReadRangeArgs()
    err650 := containerStruct0.ReadField1(jsProt649)
    if err650 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatIds
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.TalkSyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageReadRange(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "react":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "React requires 1 args")
      flag.Usage()
    }
    arg651 := flag.Arg(1)
    mbTrans652 := thrift.NewTMemoryBufferLen(len(arg651))
    defer mbTrans652.Close()
    _, err653 := mbTrans652.WriteString(arg651)
    if err653 != nil {
      Usage()
      return
    }
    factory654 := thrift.NewTJSONProtocolFactory()
    jsProt655 := factory654.GetProtocol(mbTrans652)
    argvalue0 := linethrift.NewReactRequest()
    err656 := argvalue0.Read(jsProt655)
    if err656 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.React(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPreviousMessagesV2WithRequest":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPreviousMessagesV2WithRequest requires 2 args")
      flag.Usage()
    }
    arg657 := flag.Arg(1)
    mbTrans658 := thrift.NewTMemoryBufferLen(len(arg657))
    defer mbTrans658.Close()
    _, err659 := mbTrans658.WriteString(arg657)
    if err659 != nil {
      Usage()
      return
    }
    factory660 := thrift.NewTJSONProtocolFactory()
    jsProt661 := factory660.GetProtocol(mbTrans658)
    argvalue0 := linethrift.NewGetPreviousMessagesV2Request()
    err662 := argvalue0.Read(jsProt661)
    if err662 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.TalkSyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetPreviousMessagesV2WithRequest(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getPreviousMessagesV2":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetPreviousMessagesV2 requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetPreviousMessagesV2(context.Background()))
    fmt.Print("\n")
    break
  case "getRecentMessagesV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetRecentMessagesV2 requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err664 := (strconv.Atoi(flag.Arg(2)))
    if err664 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetRecentMessagesV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cancelReaction":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CancelReaction requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CancelReaction(context.Background()))
    fmt.Print("\n")
    break
  case "determineMediaMessageFlow":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "DetermineMediaMessageFlow requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.DetermineMediaMessageFlow(context.Background()))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncementsBulk":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncementsBulk requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetChatRoomAnnouncementsBulk(context.Background()))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncements":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncements requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetChatRoomAnnouncements(context.Background()))
    fmt.Print("\n")
    break
  case "removeChatRoomAnnouncement":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "RemoveChatRoomAnnouncement requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.RemoveChatRoomAnnouncement(context.Background()))
    fmt.Print("\n")
    break
  case "createChatRoomAnnouncement":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CreateChatRoomAnnouncement requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CreateChatRoomAnnouncement(context.Background()))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
